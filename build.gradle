buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    id 'java'
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile 'com.google.guava:guava:23.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-json-org', version: '2.9.9'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'
    compile 'com.github.everit-org.json-schema:org.everit.json.schema:1.11.1'

    testCompile 'junit:junit:4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
}

repositories {
    jcenter()
    maven { url 'https://jitpack.io' } 
}

jar {
  from sourceSets.main.allSource
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task printStdoutWarning { 
            print """
kernelRoot was not specified, so generated sources will be printed to stdout.
Use -PkernelRoot=/path/to/aion/root to write source files into their expected
location.  
"""
}

def AION_API_AUTOGEN_BASE = '/modApiServer/src/org/aion/api/server/rpc2/autogen/'

// -- Tasks that generate one Java file ---------------------------------------

task genRpcProcessor(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateRpcProcessor'
    classpath = sourceSets.main.runtimeClasspath
    ext["filename"] = 'RpcProcessor2.java'
}


task genRpcInterface(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateRpcInterface'
    classpath = sourceSets.main.runtimeClasspath
    ext["filename"] = 'Rpc.java'
}

task genDeserializer(type: JavaExec) { 
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateDeserializer'
    classpath = sourceSets.main.runtimeClasspath
    ext["filename"] = 'TemplatedSerializer.java'
}

// Use this for the tasks that print to stdout and need to be 
// redirected to one file
def configStdout = {
    if(project.hasProperty("kernelRoot")) { 
        def file = file(project.getProperty("kernelRoot") + AION_API_AUTOGEN_BASE + ext['filename'])
        mkdir file.parent
        standardOutput = new FileOutputStream(file)
    } else {
        dependsOn printStdoutWarning
    }
}

genRpcProcessor configStdout
genRpcInterface configStdout
genDeserializer configStdout

// -- Tasks that generate many Java files -------------------------------------

task genDataHolders(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateDataHolders'
    classpath = sourceSets.main.runtimeClasspath
    ext["dirname"] = 'pod' // because that's what's used in the Java program
}

task genExceptions(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateExceptions'
    classpath = sourceSets.main.runtimeClasspath
    ext["dirname"] = 'errors' // because that's what's used in the Java program
}

// Use this for the tasks that directly writes into multiple files
// of its own choosing 
def configOutdir = {
    if(project.hasProperty("kernelRoot")) { 
        args project.getProperty("kernelRoot")
        def file = file(project.getProperty("kernelRoot") + AION_API_AUTOGEN_BASE + ext['dirname'])
        mkdir file
    } else {
        dependsOn printStdoutWarning
    }
}

genDataHolders configOutdir
genExceptions configOutdir

// -- Docs generation ---------------------------------------------------------

task generateDocs(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateDocs'
    classpath = sourceSets.main.runtimeClasspath

    if(project.hasProperty("docFile")) { 
        standardOutput = new FileOutputStream(docFile)
    } else {
        dependsOn printStdoutWarning
    }
}

// -- Java generation ---------------------------------------------------------

task generateJava {
    dependsOn genRpcProcessor
    dependsOn genRpcInterface
    dependsOn genDataHolders
    dependsOn genDeserializer
    dependsOn genExceptions
}

