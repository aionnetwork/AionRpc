/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile 'com.google.guava:guava:23.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-json-org', version: '2.9.9'

    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'
    compile 'com.github.everit-org.json-schema:org.everit.json.schema:1.11.1'

    testCompile 'junit:junit:4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'https://jitpack.io' }
}

def printStdoutWarning() { 
            println """
kernelRoot was not specified, so generated sources will be printed to stdout.
Use -PkernelRoot=/path/to/aion/root to write source files into their expected
location.  
"""
}

task genRpcProcessor(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateRpcProcessor'
    classpath = sourceSets.main.runtimeClasspath

    if(project.hasProperty("kernelRoot")) { 
        def subpath = "/modApiServer/src/org/aion/api/server/rpc2/autogen/RpcProcessor2.java"
        standardOutput = new FileOutputStream(project.getProperty("kernelRoot") + subpath)
    } else {
        printStdoutWarning()
    }
}

task genRpcInterface(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateRpcInterface'
    classpath = sourceSets.main.runtimeClasspath

    if(project.hasProperty("kernelRoot")) { 
        def subpath = "/modApiServer/src/org/aion/api/server/rpc2/autogen/Rpc.java"
        standardOutput = new FileOutputStream(project.getProperty("kernelRoot") + subpath)
    } else {
        printStdoutWarning()
    }
}

task genDeserializer(type: JavaExec) { 
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateDeserializer'
    classpath = sourceSets.main.runtimeClasspath

    if(project.hasProperty("kernelRoot")) { 
        def subpath = "/modApiServer/src/org/aion/api/server/rpc2/autogen/TemplatedSerializer.java"
        standardOutput = new FileOutputStream(project.getProperty("kernelRoot") + subpath)
    } else {
        printStdoutWarning()
    }
}

task genDataHolders(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateDataHolders'
    classpath = sourceSets.main.runtimeClasspath

    if(project.hasProperty("kernelRoot")) { 
        args project.getProperty("kernelRoot")
    } 
}

task genExceptions(type: JavaExec) {
    dependsOn 'classes'
    main = 'org.aion.api.codegen.GenerateExceptions'
    classpath = sourceSets.main.runtimeClasspath

    if(project.hasProperty("kernelRoot")) { 
        args project.getProperty("kernelRoot")
    } 
}

task generateAll {
    dependsOn genRpcProcessor
    dependsOn genRpcInterface
    dependsOn genDataHolders
    dependsOn genDeserializer
    dependsOn genExceptions
}

jar {
  from sourceSets.main.allSource
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
